import java.util.*;

class Solution {
    public int[] solution(int N, int[] stages) {
        int[] answer = new int[N];
        Map<Integer, Double> map = new HashMap<>(); // 실패율 저장

        // N+1 까지 처리하기 위해 N + 2 선언
        int[] failedPlayers = new int[N + 2];       // 실패한 플레이어 수 저장
        int[] totalPlayers = new int[N + 2];        // 플레이어 수 저장
        
        // 플레이어 업데이트
        for (int stage : stages) {
            if (stage <= N) {       // 마지막 스테이지까지 클리어하지 못한 플레이어 수 저장
                failedPlayers[stage]++;
            }
            for (int i = 1; i <= stage; i++) {  // 각 스테이지를 클리어한 플레이어 수 저장
                totalPlayers[i]++;
                // System.out.println("i의 값 : " + i + "\n totalPlayers[i]의 값 : " + totalPlayers[i]);
            }
        }

        // 실패율 계산
        for (int i = 1; i <= N; i++) {
            // 스테이지의 전체 플레이어 대비 실패한 플레리어의 비율로 계산
            double failureRate = (totalPlayers[i] == 0) ? 0 : (double) failedPlayers[i] / totalPlayers[i];
            map.put(i, failureRate);    // 스테이지 번호와 실패율 저장
        }

        List<Integer> sortedStages = new ArrayList<>(map.keySet()); // 스테이지 번호 (key값)
        // Collections.sort 기존 구현된 정렬 외에 다른 기준으로 정렬하고 싶을 때 사용
        Collections.sort(sortedStages, (stage1, stage2) -> {
            double failTotal1 = map.get(stage1);
            double failTotal2 = map.get(stage2);
            // 순서 변경
            if (failTotal1 > failTotal2) {
                return -1;
            } else if (failTotal1 < failTotal2) {
                return 1;
            } else {    
                // 두 스테이지의 실패율이 같을 때 정렬
                return stage1.compareTo(stage2);
            }
        });

        for (int i = 0; i < N; i++) {
            answer[i] = sortedStages.get(i);
        }

        return answer;
    }
}